name: Test with registered Docker Image
on:
  pull_request:
  push:
    branches:
      - main
  workflow_call:
    inputs:
      CACHE_DIR:
        required: false
        type: string
      CACHE_FILE:
        required: false
        type: string
      TAG:
        required: false
        type: string

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"

  changes:
    runs-on: ubuntu-latest
    if: ${{ inputs.CACHE_FILE == '' }}
    outputs:
      paths: ${{ steps.filter.outputs.paths }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            paths:
              - "contrib/*"
              - "tools/*"
              - "go.mod"

  test-with-registerd-docker-image:
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ inputs.CACHE_FILE == '' && needs.changes.outputs.paths != 'true' }}
    container:
      image: line/tm-db-testing
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/checkout@v3
      - name: test & coverage report creation
        run: |
          go test ./... -mod=readonly -timeout 8m -race -coverprofile=coverage.txt -covermode=atomic \
          -tags=cleveldb,rocksdb,boltdb,badgerdb -v
      - uses: codecov/codecov-action@v2.0.3
        with:
          file: ./coverage.txt
          fail_ci_if_error: true

  test:
    runs-on: ubuntu-latest
    if: ${{ inputs.CACHE_FILE != '' }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache Docker Image
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ inputs.CACHE_DIR }}
          key: ${{ inputs.CACHE_FILE }}

      - name: Load Docker Image
        run: |
          docker load -i ${{ inputs.CACHE_FILE }}

      - name: test
        run: |
          docker run -e CGO_LDFLAGS=-lrocksdb --rm -v "$(pwd)":/workspace -w /workspace ${{ inputs.TAG }} bash -c "\
          go test ./... -mod=readonly -timeout 8m -race -coverprofile=coverage.txt -covermode=atomic \
          -tags=cleveldb,rocksdb,boltdb,badgerdb -v \
          "

      - uses: codecov/codecov-action@v2.0.3
        with:
          file: ./coverage.txt
          fail_ci_if_error: true
